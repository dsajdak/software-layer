From f942990d9906edb0f8a5bf10d34db3af7c707a02 Mon Sep 17 00:00:00 2001
From: srubinacci <srubinac@broadinstitute.org>
Date: Fri, 9 Feb 2024 18:23:28 -0500
Subject: [PATCH] Bugfix phase_update - removed leaks

---
 ligate/src/ligater/ligater_algorithm.cpp  | 82 +++++++++++++++--------
 ligate/src/ligater/ligater_parameters.cpp |  2 -
 2 files changed, 54 insertions(+), 30 deletions(-)

diff --git a/ligate/src/ligater/ligater_algorithm.cpp b/ligate/src/ligater/ligater_algorithm.cpp
index 50e0dfca..7e2fe038 100644
--- a/ligate/src/ligater/ligater_algorithm.cpp
+++ b/ligate/src/ligater/ligater_algorithm.cpp
@@ -86,14 +86,14 @@ void ligater::remove_format(bcf_hdr_t *hdr, bcf1_t *line)
 
 void ligater::phase_update(bcf_hdr_t *hdr, bcf1_t *line, const bool uphalf)
 {
-    int i, nGTs = bcf_get_genotypes(hdr, line, &GTa, &mGTa);
+    int nGTs = bcf_get_genotypes(hdr, line, &GTa, &mGTa);
     if ( nGTs <= 0 ) return;    // GT field is not present
-    for (i=0; i<bcf_hdr_nsamples(hdr); i++)
+    for (auto i=0; i<bcf_hdr_nsamples(hdr); i++)
     {
 		if ( !swap_phase[uphalf][i] ) continue;
 		int *gt = &GTa[i*2];
 		if ( bcf_gt_is_missing(gt[0]) || gt[1]==bcf_int32_vector_end ) continue;
-        if (!bcf_gt_is_phased(gt[0]) || !bcf_gt_is_phased(gt[1])) continue;
+        if (!bcf_gt_is_phased(gt[1])) continue;
         const int gt0 = bcf_gt_phased(bcf_gt_allele(gt[1])==1);
         const int gt1 = bcf_gt_phased(bcf_gt_allele(gt[0])==1);
         gt[0] = gt0;
@@ -125,10 +125,10 @@ void ligater::update_distances()
 
 void ligater::write_record(htsFile *fd, bcf_hdr_t * out_hdr, bcf_hdr_t * hdr_in, bcf1_t *line, const bool uphalf)
 {
-	bcf_translate(out_hdr, hdr_in, line);
 	if ( nswap[uphalf] ) phase_update(hdr_in, line, uphalf);
 	//remove_info(out_hdr,line);
 	//remove_format(out_hdr,line);
+	bcf_translate(out_hdr, hdr_in, line);
 	if (bcf_write(fd, out_hdr, line) ) vrb.error("Failed to write the record output to file");
 }
 
@@ -224,33 +224,33 @@ void ligater::ligate() {
 	sr->require_index = 1;
 	int n_threads = options["thread"].as < int > ();
 	if (n_threads > 1) if (bcf_sr_set_threads(sr, n_threads) < 0) vrb.error("Failed to create threads");
-
 	bcf_hdr_t * out_hdr = NULL;
-	bcf1_t *line = bcf_init();
 	std::vector<int> start_pos(nfiles);
 
+    bcf1_t *line_t = bcf_init();
 	for (int f = 0, prev_chrid = -1 ; f < nfiles ; f ++)
 	{
 		htsFile *fp = hts_open(filenames[f].c_str(), "r"); if ( !fp ) vrb.error("Failed to open: " + filenames[f] + ".");
 		bcf_hdr_t *hdr = bcf_hdr_read(fp); if ( !hdr ) vrb.error("Failed to parse header: " + filenames[f] +".");
 		out_hdr = bcf_hdr_merge(out_hdr,hdr);
-        if ( bcf_hdr_nsamples(hdr) != bcf_hdr_nsamples(out_hdr) ) vrb.error("Different number of samples in " + filenames[f] + ".");
-        for (int j=0; j<bcf_hdr_nsamples(hdr); j++)
-        	if ( string(out_hdr->samples[j]) != string(hdr->samples[j]) )  vrb.error("Different sample names in " + filenames[f] + ".");
+		if ( bcf_hdr_nsamples(hdr) != bcf_hdr_nsamples(out_hdr) ) vrb.error("Different number of samples in " + filenames[f] + ".");
+		for (int j=0; j<bcf_hdr_nsamples(hdr); j++)
+			if ( string(out_hdr->samples[j]) != string(hdr->samples[j]) )  vrb.error("Different sample names in " + filenames[f] + ".");
 
-        int ret = bcf_read(fp, hdr, line);
+		int ret = bcf_read(fp, hdr, line_t);
 		if ( ret!=0 ) vrb.error("Empty file detected: " + filenames[f] +".");
-        else
-        {
-            int chrid = bcf_hdr_id2int(out_hdr,BCF_DT_CTG,bcf_seqname(hdr,line));
-            start_pos[f] = chrid==prev_chrid ? line->pos : -1;
-            prev_chrid = chrid;
-        }
-        bcf_hdr_destroy(hdr);
-        if ( hts_close(fp)!=0 ) vrb.error("Close failed: " + filenames[f] + ".");
+		else
+		{
+			int chrid = bcf_hdr_id2int(out_hdr,BCF_DT_CTG,bcf_seqname(hdr,line_t));
+			start_pos[f] = chrid==prev_chrid ? line_t->pos : -1;
+			prev_chrid = chrid;
+		}
+		bcf_hdr_destroy(hdr);
+		if ( hts_close(fp)!=0 ) vrb.error("Close failed: " + filenames[f] + ".");
 	}
+	bcf_destroy(line_t);
 
-    for (int i=1; i<nfiles; i++) if ( start_pos[i-1]!=-1 && start_pos[i]!=-1 && start_pos[i]<start_pos[i-1] ) vrb.error("The files not in ascending order");
+	for (int i=1; i<nfiles; i++) if ( start_pos[i-1]!=-1 && start_pos[i]!=-1 && start_pos[i]<start_pos[i-1] ) vrb.error("The files not in ascending order");
     int i = 0, nrm = 0;
     /*
     while ( i<out_hdr->nhrec )
@@ -337,9 +337,28 @@ void ligater::ligate() {
 	bcf_hdr_add_sample(out_hdr, NULL);
 	if (bcf_hdr_write(out_fp, out_hdr)) vrb.error("Failed to write header to output file");
 
+	std::string fnidx= (file_type == OFILE_BCFC)? fname +".csi" : fname+".tbi";
+	if (file_type!=OFILE_VCFU)
+	{
+		std::ifstream file_idx(fnidx);
+		if (file_idx.good())
+		{
+			file_idx.close();
+			if (std::remove(fnidx.c_str()))
+			{
+				vrb.warning("Detected index file. Were not able to delete it. Trying to skip index creation.");
+				file_type=OFILE_VCFU;
+			}
+		}
+		if (file_type!=OFILE_VCFU)
+		{
+			if (bcf_idx_init(out_fp, out_hdr, 14, fnidx.c_str())) vrb.error("Initializing index");
+		}
+	}
+
+	bcf1_t* line = NULL;
 	int n_variants = 0;
 	int n_variants_at_start_cnk = 0;
-	line = bcf_init();
 	int chunk_counter=0;
 	int n_sites_buff = 0;
 
@@ -352,7 +371,6 @@ void ligater::ligate() {
 	vrb.bullet("#samples = " + stb.str(nsamples));
 	vrb.print("");
 	tac.clock();
-
     // keep only two open files at a time
     while ( ifname < nfiles )
     {
@@ -385,7 +403,7 @@ void ligater::ligate() {
 
             // Get a line to learn about current position
             for (i=0; i<sr->nreaders; i++) if ( bcf_sr_has_line(sr,i) ) break;
-            bcf1_t *line = bcf_sr_get_line(sr,i);
+            line = bcf_sr_get_line(sr,i);
 
             // This can happen after bcf_sr_seek: indel may start before the coordinate which we seek to.
             if ( seek_chr>=0 && seek_pos>line->pos && seek_chr==bcf_hdr_name2id(out_hdr, bcf_seqname(sr->readers[i].header,line)) ) continue;
@@ -465,16 +483,23 @@ void ligater::ligate() {
     }
 	vrb.print("Cnk " + stb.str(ifname-1) + " [" + prev_chr + ":" + stb.str(first_pos) + "-" + stb.str(prev_pos[0] + 1) + "] [L=" + stb.str(n_variants-n_variants_at_start_cnk) + "]" );
 
+	if (file_type!=OFILE_VCFU)
+	{
+		if (bcf_idx_save(out_fp)) vrb.warning("Error writing index");
+	}
 	if (hts_close(out_fp)) vrb.error("Non zero status when closing VCF/BCF file descriptor");
-	bcf_hdr_destroy(out_hdr);
+	out_fp=NULL;
 	bcf_sr_destroy(sr);
-	if (line) bcf_destroy(line);
-	free(GTa);
-    free(GTb);
-
+	sr=NULL;
+	bcf_hdr_destroy(out_hdr);
+	out_hdr=NULL;
+	if (GTa) free(GTa);
+	GTa=NULL;
+	if (GTb) free(GTb);
+	GTb=NULL;
 	if (n_variants == 0) vrb.error("No variants to be phased in files");
 	vrb.title("Writing completed [L=" + stb.str(n_variants) + "] (" + stb.str(tac.rel_time()*1.0/1000, 2) + "s)");
-
+/*
 	if (options.count("index"))
 	{
 		vrb.title("Creating index");
@@ -482,5 +507,6 @@ void ligater::ligate() {
 		if (!bcf_index_build3(string(options["output"].as < string > ()).c_str(), NULL, 14, options["thread"].as < int > ())) vrb.print("Index successfully created");
 		else vrb.warning("Problem building the index for the output file. This can indicate a problem during ligation. Try to build the index using tabix/bcftools.");
 	}
+*/
 }
 
diff --git a/ligate/src/ligater/ligater_parameters.cpp b/ligate/src/ligater/ligater_parameters.cpp
index d5460224..b32b9d80 100644
--- a/ligate/src/ligater/ligater_parameters.cpp
+++ b/ligate/src/ligater/ligater_parameters.cpp
@@ -41,7 +41,6 @@ void ligater::declare_options() {
 	bpo::options_description opt_output ("Output files");
 	opt_output.add_options()
 			("output,O", bpo::value< string >(), "Output ligated file in VCF/BCF format")
-			("index", "Whether to index the ligated output (csi format)")
 			("log", bpo::value< string >(), "Log file");
 
 	descriptions.add(opt_base).add(opt_input).add(opt_output);
@@ -85,7 +84,6 @@ void ligater::verbose_files() {
 	vrb.title("Files:");
 	vrb.bullet("Input LIST     : [" + options["input"].as < string > () + "]");
 	vrb.bullet("Output VCF     : [" + options["output"].as < string > () + "]");
-	vrb.bullet("Index output   : [" + no_yes[options.count("index")] + "]");
 	if (options.count("log")) vrb.bullet("Output LOG    : [" + options["log"].as < string > () + "]");
 }
 
